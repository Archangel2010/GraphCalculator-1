Using a strategy design Pattern to swap out each equation.

Using "equationSolver" as the abstract Strategy Class
The  Differentiate, FindX and Simplify is all concrete classes

All the classes have 3 variables. 
    1 is the equation from the user
    2 is the solved equations or the answer rather
    3 is the steps as they went on.

FindX class is to find the 'x' variable in an equation where 'x' is the unknown.

Differentiate takes the equation and creates the derivitive of it.

Simplify takes an equation and then simplifies it for the user.

The class "EquationContext" is used to create the context for the strategy pattern.

Added a output class called "toString", it handles to output to a console so far.

Need to be done:
    Set up Epsilon OS in VM
    first compile and run of the code in VS code
    Create a makefile for easier compile and run
    Added the algoritms to the equations
    See if step by step output is available